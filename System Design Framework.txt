Framework:
0. Restate the problem

1. Functional Requirements (10m)
   1.1. System
   1.2. User
   1.3. Core APIs (CRUD & Actions) (User's perspective)
   1.4. Data (Evens/Logs; No direct user involved)
   NOTE: User and System (Service) interaction (request and response)

2. Non-functional Requirements
   2.1. Scalability
   2.2. Availability
   2.3. Reliability
   2.4. Performance (Latency and Throughput target)
   2.5. Consistency
   2.6. Security
   2.7. Observability
   NOTE: 
   
	
3. Quantitative Analysis (Back-of-the-Envelope Estimation on Scale)
   3.1. Users & DAU
   3.2. Read vs Write
   3.3. QPS / TPS
   3.4. Storage
   3.5. Bandwidth
   3.6. Servers
   3.7. CPU & Memory
	
4. High-level Design + Data Flow (5â€“10m)
   4.1. Building Blocks (Components: LB, API GW, servers, DB, blobs)
   4.2. Workflow

5. APIs Design

6. Data Schema + Data Store
   6.1. SQL vs NoSQL
   6.2. Object Storage
   6.3. DB Partitioning / Sharding

7. Deep Dive on Core Components (10m)
   7.1. Scale
   7.2. Partition and Replication
   7.3. VPC
   7.4. Authentication, Throttling, Load Balancing
   7.5. Push vs Pull

8. Evolve and Optimize (5m)
   8.1. Single Point of Failure
   8.2. Monitoring and Logging (diagnosing and debugging)
   8.3. Bottleneck
   8.4. Performance
   8.5. Testability, Usability, Extensibility, Security
   8.6. Long-term
   8.7. Authentication
   8.8. Containerization
   8.9. Portability (Infrastructure as Code)
	
################################
2. Non-functional req
	1. Availability (LB, ASG, Micro, sharding, replica)
	2. Scalability (ASG, Cache, CDN, Async, Micro, sharding)
	3. Consistency (ACID, Eventual Consistency)
	4. Latency (Cache, CDN, Edge, sharding)
	5. Reliability (Redundancy, Backup, Replication, Failover)
	6. Security (Authentication, Authorization, Encryption, Firewall, VPC, Security Group)

################################
	
API Gateway: 
- Authentication and Authorization
- Request and Response Transformation
- Rate Limiting and Throttling
- Caching
- Monitoring and Logging
- Scalability and Load Balancing

Why the API Gateway in front of ELB is often the preferred architecture:

1. API Management: The API Gateway is purpose-built for API management. It offers features like request/response transformation, authentication, authorization, rate limiting, caching, monitoring, and documentation that are crucial for efficiently exposing and managing APIs.
2. Abstraction Layer: The API Gateway acts as an abstraction layer between clients and backend services. This abstraction allows you to evolve your backend services without affecting the API interface exposed to clients.
3. Fine-Grained Control: API Gateway provides fine-grained control over how API requests are handled, authenticated, authorized, and routed to backend resources.
4. Protocol Translation: API Gateway supports multiple protocols and allows you to translate protocols if needed, while ELB primarily deals with network-level load balancing.
5. Serverless Integration: API Gateway seamlessly integrates with AWS Lambda for serverless computing, allowing you to build APIs that directly invoke Lambda functions.
6. Security and Access Control: API Gateway offers extensive security features for API endpoints, including IAM roles, custom authorizers, and OAuth integration, enhancing the overall security posture.
7. Multiple Backend Resources: API Gateway allows integration with various backend resources beyond just ELB, such as Lambda, HTTP endpoints, and AWS services.

#############################
Common Single Points of Failure (SPOFs):

- Load Balancer: If a load balancer is the only entry point to a service and it fails, users can't access the service.
- Authentication Services: A central authentication service that fails can prevent users from accessing multiple systems.
- Database Server: A single database server can become a bottleneck or single point of failure if it experiences downtime or data corruption.
- External Services or APIs: Depending on a single external service or API can cause failures if that service experiences issues.

- Hardware Failure: If a critical hardware component, such as a server or storage device, fails, it can disrupt the entire system.
- Network Dependency: Relying on a single network connection or router can result in connectivity issues if it fails.

################################
Common Bottlenecks:

- Database Performance: Inefficient database queries, lack of indexing, or high database contention can lead to slow responses.
- Sequential Processing: When tasks must be executed sequentially, it can create a bottleneck and slow down the overall process.
- Synchronization and Locking: Excessive locking or synchronization can lead to contention and reduce performance in multithreaded applications.

- Contention for Resources: Multiple components competing for the same resources (e.g., CPU, memory) can cause contention and slowdowns.
- Inefficient Algorithms: Poorly optimized algorithms can lead to excessive processing times and inefficient resource usage.

- CPU Utilization: High CPU usage can slow down processing and response times for applications.
- Memory Constraints: Insufficient memory can lead to performance degradation and crashes due to excessive swapping.
- Disk I/O: Slow disk I/O can cause delays in reading and writing data, affecting application performance.
- Network Congestion: Heavy network traffic or limited bandwidth can result in delays and data transfer issues.


################################
Mitigating SPOFs and addressing bottlenecks involves 
- redundancy,

- capacity planning. 
- load balancing, 
- efficient resource allocation, 
- performance optimization

A well-designed system considers these factors to ensure reliability, availability, and optimal performance.